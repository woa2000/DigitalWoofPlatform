import { Client } from 'pg';
import { exec } from 'child_process';
import { promisify } from 'util';

const execAsync = promisify(exec);

const connectionString = 'postgres://rasystem:M@asterKey_0000@easypanel.rasystem.com.br:5440/rasystem?sslmode=disable';

async function testEasypanelConnection() {
  console.log('üöÄ Testando conex√£o PostgreSQL - Easypanel');
  console.log('=' .repeat(60));
  console.log('üîó String:', connectionString.replace(/:[^@]*@/, ':****@'));
  console.log('');

  // Teste 1: Resolu√ß√£o DNS
  console.log('üì° Teste 1: Resolu√ß√£o DNS do hostname');
  try {
    const { stdout } = await execAsync('nslookup easypanel.rasystem.com.br');
    console.log('‚úÖ DNS: easypanel.rasystem.com.br pode ser resolvido');
    // Extrair IP se poss√≠vel
    const ipMatch = stdout.match(/Address: (\d+\.\d+\.\d+\.\d+)/);
    if (ipMatch) {
      console.log('   IP encontrado:', ipMatch[1]);
    }
  } catch (error) {
    console.log('‚ùå DNS: Falha na resolu√ß√£o do hostname');
    console.log('   Erro:', error.message);
  }

  // Teste 2: Ping para verificar conectividade
  console.log('\nüèì Teste 2: Conectividade (ping)');
  try {
    const { stdout } = await execAsync('ping -c 3 easypanel.rasystem.com.br');
    console.log('‚úÖ PING: Host responde ao ping');
    
    // Extrair tempo de resposta
    const timeMatch = stdout.match(/time=(\d+\.?\d*)/);
    if (timeMatch) {
      console.log('   Tempo de resposta:', timeMatch[1], 'ms');
    }
  } catch (error) {
    console.log('‚ùå PING: Host n√£o responde ao ping');
  }

  // Teste 3: Verificar se a porta 5440 est√° acess√≠vel
  console.log('\nüîå Teste 3: Conectividade na porta 5440');
  try {
    await execAsync('nc -z -v easypanel.rasystem.com.br 5440', { timeout: 10000 });
    console.log('‚úÖ PORTA: 5440 est√° acess√≠vel');
  } catch (error) {
    console.log('‚ùå PORTA: 5440 n√£o est√° acess√≠vel ou filtrada por firewall');
  }

  // Teste 4: Conex√£o PostgreSQL
  console.log('\nüóÑÔ∏è  Teste 4: Conex√£o PostgreSQL');
  const client = new Client({
    connectionString: connectionString,
    connectionTimeoutMillis: 10000, // 10 segundos de timeout
  });

  try {
    console.log('üîÑ Tentando conectar ao PostgreSQL...');
    await client.connect();
    console.log('‚úÖ CONEX√ÉO: Estabelecida com sucesso!');

    // Informa√ß√µes b√°sicas do servidor
    const versionResult = await client.query('SELECT version(), current_database(), current_user, inet_server_addr(), inet_server_port();');
    const row = versionResult.rows[0];
    
    console.log('üìä Informa√ß√µes do servidor:');
    console.log('   - Vers√£o:', row.version.split(' ')[0] + ' ' + row.version.split(' ')[1]);
    console.log('   - Database:', row.current_database);
    console.log('   - Usu√°rio:', row.current_user);
    console.log('   - IP servidor:', row.inet_server_addr || 'N/A');
    console.log('   - Porta servidor:', row.inet_server_port || 'N/A');

    // Teste de permiss√µes
    console.log('\nüîê Teste 5: Verifica√ß√£o de permiss√µes');
    try {
      // Listar schemas dispon√≠veis
      const schemaResult = await client.query('SELECT schema_name FROM information_schema.schemata WHERE schema_name NOT IN (\'information_schema\', \'pg_catalog\', \'pg_toast\');');
      console.log('‚úÖ SCHEMAS: Acesso de leitura OK');
      console.log('   Schemas dispon√≠veis:', schemaResult.rows.map(r => r.schema_name).join(', '));

      // Teste de cria√ß√£o de tabela tempor√°ria
      await client.query('CREATE TEMP TABLE test_permissions (id SERIAL PRIMARY KEY, test_data TEXT);');
      await client.query('INSERT INTO test_permissions (test_data) VALUES ($1);', ['Teste de conectividade']);
      const testResult = await client.query('SELECT * FROM test_permissions;');
      console.log('‚úÖ ESCRITA: Permiss√µes de escrita OK');
      console.log('   Registro inserido:', testResult.rows[0]);

    } catch (permError) {
      console.log('‚ö†Ô∏è  PERMISS√ïES: Limitadas');
      console.log('   Erro:', permError.message);
    }

    // Teste de performance b√°sico
    console.log('\n‚ö° Teste 6: Performance b√°sica');
    const startTime = Date.now();
    await client.query('SELECT 1;');
    const endTime = Date.now();
    console.log('‚úÖ LAT√äNCIA: Query simples executada em', endTime - startTime, 'ms');

  } catch (error) {
    console.log('‚ùå CONEX√ÉO: Falhou');
    console.log('üîç Detalhes do erro:');
    console.log('   - C√≥digo:', error.code || 'N/A');
    console.log('   - Mensagem:', error.message);
    
    // Diagn√≥stico espec√≠fico do erro
    if (error.code === 'ENOTFOUND') {
      console.log('üí° Causa: Hostname n√£o encontrado');
    } else if (error.code === 'ECONNREFUSED') {
      console.log('üí° Causa: Conex√£o recusada - servidor pode estar offline');
    } else if (error.code === 'ETIMEDOUT') {
      console.log('üí° Causa: Timeout - servidor demorou para responder');
    } else if (error.code === '28P01') {
      console.log('üí° Causa: Falha na autentica√ß√£o - usu√°rio/senha incorretos');
    } else if (error.code === '3D000') {
      console.log('üí° Causa: Database "rasystem" n√£o existe');
    } else if (error.code === '28000') {
      console.log('üí° Causa: Falha na autentica√ß√£o - m√©todo SSL/TLS');
    }

  } finally {
    try {
      await client.end();
      console.log('üîå Conex√£o encerrada');
    } catch (endError) {
      console.log('‚ö†Ô∏è  Erro ao encerrar conex√£o:', endError.message);
    }
  }

  console.log('\n' + '=' .repeat(60));
  console.log('‚ú® Teste finalizado');
}

testEasypanelConnection().catch(console.error);