// Diagn√≥stico simples do problema do tenant
import fetch from 'node-fetch';

async function diagnoseTenantIssue() {
  console.log('üîç Diagnosticando problema do tenant...\n');
  
  // 1. Teste sem autentica√ß√£o
  console.log('1Ô∏è‚É£ Testando sem autentica√ß√£o:');
  try {
    const response = await fetch('http://localhost:5000/api/tenants/current');
    console.log(`   Status: ${response.status}`);
    const data = await response.text();
    console.log(`   Response: ${data}\n`);
  } catch (error) {
    console.log(`   Erro: ${error.message}\n`);
  }
  
  // 2. Teste com token inv√°lido
  console.log('2Ô∏è‚É£ Testando com token inv√°lido:');
  try {
    const response = await fetch('http://localhost:5000/api/tenants/current', {
      headers: { 'Authorization': 'Bearer invalid-token' }
    });
    console.log(`   Status: ${response.status}`);
    const data = await response.text();
    console.log(`   Response: ${data}\n`);
  } catch (error) {
    console.log(`   Erro: ${error.message}\n`);
  }
  
  // 3. Teste com token de usu√°rio inexistente
  console.log('3Ô∏è‚É£ Testando com usu√°rio inexistente:');
  try {
    // Simular token de usu√°rio que n√£o existe no DB
    const fakePayload = {
      sub: '00000000-0000-0000-0000-000000000000',
      email: 'fake@example.com',
      aud: 'authenticated',
      role: 'authenticated'
    };
    
    // N√£o vou gerar JWT real aqui, apenas explicar o teste
    console.log('   (Teste conceitual - usu√°rio inexistente retornaria 404)\n');
  } catch (error) {
    console.log(`   Erro: ${error.message}\n`);
  }
  
  // 4. Verificar se servidor est√° respondendo
  console.log('4Ô∏è‚É£ Testando sa√∫de do servidor:');
  try {
    const response = await fetch('http://localhost:5000/api/analytics');
    console.log(`   Status Analytics: ${response.status}`);
    
    // Teste outra rota
    const response2 = await fetch('http://localhost:5000/api/dashboard');
    console.log(`   Status Dashboard: ${response2.status}\n`);
  } catch (error) {
    console.log(`   Erro servidor: ${error.message}\n`);
  }
  
  console.log('‚úÖ Diagn√≥stico completo!');
  console.log('üí° Pr√≥ximos passos:');
  console.log('   - Verificar logs do servidor no terminal');
  console.log('   - Verificar se h√° usu√°rio autenticado no frontend');
  console.log('   - Testar com token v√°lido do Supabase');
}

diagnoseTenantIssue();